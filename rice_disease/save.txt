st.title("üåæ Ch·∫©n ƒêo√°n B·ªánh L√° L√∫a")
st.write("Vui l√≤ng t·∫£i l√™n 01 h√¨nh ·∫£nh l√° l√∫a.")

uploaded_file = st.file_uploader("üì∑ CH·ªåN ·∫¢NH:", type=["jpg", "png", "jpeg"])

if uploaded_file is not None:
    img = Image.open(uploaded_file)
    st.image(img, caption="üì∑ ·∫¢nh ƒë√£ ƒë∆∞·ª£c t·∫£i", use_container_width=True)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
        img.save(tmp_file.name)

        if st.button("üîç B·∫Øt ƒë·∫ßu ch·∫©n ƒëo√°n"):
            label = predict_image(tmp_file.name) # ignore the warning
            warnings.filterwarnings("ignore")
        st.write("**K·∫øt qu·∫£ ch·∫©n ƒëo√°n:**")
        st.success(f"üìã B·ªánh ƒë∆∞·ª£c ch·∫©n ƒëo√°n: -- {label}")

>> l∆∞u tr·ªØ ·ªü d√≤ng 39 - app.py


def predict_image(image_path, model_path='model/rice_model.h5', class_map_path="class_indices.json"):
    # T·∫£i m√¥ h√¨nh
    model = load_model(model_path)
    # K√≠ch th∆∞·ªõc ·∫£nh ƒë·∫ßu v√†o
    img = load_img(image_path, target_size=(128, 128)), load_and_preprocess_image(image_path)
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    # D·ª± ƒëo√°n b·ªánh
    prediction = model.predict(img)[0]
    predicted_class = np.argmax(prediction)
    predictions = model.predict(img_array)[0]
    predicted_idx = np.argmax(predictions)
    
    with open(class_map_path, "r", encoding="utf-8") as f:
        class_indices = json.load(f)
    inv_map = {v: k for k, v in class_indices.items()}

    predicted_label = inv_map[predicted_idx]
    confidence = float(np.max(prediction) * 100)
    # c·ªßa confidence c≈©: float(predictions[predicted_idx])
    label_idx = np.argmax(predictions)
    label = class_indices[label_idx]  
    
    if class_indices:
        inv_map = {v: k for k, v in class_indices.items()}
        return inv_map[predicted_class]
    return confidence, label, predicted_label
    # return c≈© c√≥ predicted_label


>> code c≈© d√≤ng 13 predict.py